import csv
from collections import defaultdict
from entidades.plataforma import Plataforma
from estrutura_dados.fila import FilaCSV
from estrutura_dados.arvore_binaria_busca import AVLTree as BST
from entidades.conteudo import Conteudo
from entidades.usuario import Usuario
from entidades.interacao import Interacao
from ordena√ß√£o.ordenacao import quick_sort, insertion_sort, merge_sort
 # ou merge_sort, ou bubble_sort, ou selection_sort, ou counting_sort, ou bucket_sort, ou shell_sort, ou cocktail_sort, ou gnome_sort

  # ou insertion_sort

class SistemaAnaliseEngajamento:
    def __init__(self):
        self._fila_interacoes_brutas = FilaCSV()
        self._arvore_conteudos = BST()
        self._arvore_usuarios = BST()
        self._plataformas_registradas = {}

    def _carregar_interacoes_csv(self, caminho_arquivo: str):
        with open(caminho_arquivo, newline='', encoding='utf-8') as arquivo:
            leitor = csv.reader(arquivo)
            next(leitor)  # Pula cabe√ßalho
            for linha in leitor:
                self._fila_interacoes_brutas.enfileirar(linha)

    def _ordenar(self, lista, metrica=None, key_func=None, algoritmo='auto'):
        """
        Ordena uma lista de objetos usando o algoritmo escolhido (quick, insertion, merge ou auto).

        Par√¢metros:
        - lista: lista de objetos a serem ordenados.
        - metrica: nome do atributo ou m√©todo a ser usado para ordena√ß√£o (string).
        - key_func: fun√ß√£o opcional que retorna o valor a ser usado na ordena√ß√£o.
        - algoritmo: 'quick', 'insertion', 'merge' ou 'auto' (seleciona com base no tamanho da lista).
        """
        if not lista:
            return []

        # Decide a fun√ß√£o de chave com prioridade para key_func
        chave_funcional = key_func
        if not key_func and metrica:
            chave_funcional = lambda obj: getattr(obj, metrica)() if callable(getattr(obj, metrica)) else getattr(obj, metrica)

        # Seleciona o algoritmo com base no tipo ou tamanho
        if algoritmo == 'auto':
            algoritmo = 'insertion' if len(lista) <= 20 else 'quick'

        if algoritmo == 'quick':
            return quick_sort(lista, key_func=chave_funcional)
        elif algoritmo == 'insertion':
            return insertion_sort(lista, key_func=chave_funcional)
        elif algoritmo == 'merge':
            return merge_sort(lista, key_func=chave_funcional)
        else:
            raise ValueError(f"Algoritmo de ordena√ß√£o desconhecido: {algoritmo}")

    def processar_interacoes_da_fila(self):
        """
        Processa as intera√ß√µes da fila, registrando conte√∫dos, usu√°rios e intera√ß√µes.
        Essa fun√ß√£o faz o processamento linha a linha de uma fila de intera√ß√µes, 
        preenchendo √°rvores bin√°rias de busca (_arvore_conteudos, _arvore_usuarios), 
        mapeando plataformas e criando objetos de Interacao, Conteudo e Usuario.

        ‚è±Ô∏è An√°lise de Complexidade
        1. Desenfileirar cada linha da fila:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de intera√ß√µes na fila.
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias para cada linha.
        2. Processar cada linha:
        - Convers√£o de tipos (int, str) e manipula√ß√£o de strings:
        Tempo: O(1) ‚Äî opera√ß√µes constantes para cada linha.
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        - Verifica√ß√£o e inser√ß√£o na √°rvore de conte√∫dos:
        Tempo: O(log m) ‚Äî onde m √© o n√∫mero de conte√∫dos j√° registrados (m√©dia).
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        - Verifica√ß√£o e inser√ß√£o na √°rvore de usu√°rios:
        Tempo: O(log k) ‚Äî onde k √© o n√∫mero de usu√°rios j√° registrados (m√©dia).
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        - Cria√ß√£o de objetos Interacao, Conteudo e Usuario:
        Tempo: O(1) ‚Äî opera√ß√µes constantes para cada linha.
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        3. Adicionar intera√ß√µes ao conte√∫do e registrar no usu√°rio:
        Tempo: O(1) ‚Äî opera√ß√µes constantes para cada linha.
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        4. Total:
        Tempo: O(n * (log m + log k)) ‚Äî onde n √© o n√∫mero
        de intera√ß√µes, m √© o n√∫mero de conte√∫dos e k √© o n√∫mero de usu√°rios.
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.

        """
        while not self._fila_interacoes_brutas.esta_vazia():
            linha = self._fila_interacoes_brutas.desenfileirar()
            try:
                id_conteudo = int(linha[0].strip())
                nome_conteudo = linha[1].strip().capitalize()
                id_usuario = int(linha[2].strip())
                timestamp_interacao = linha[3].strip()
                nome_plataforma = linha[4].strip()
                tipo_interacao = linha[5].strip()
                try:
                    tempo_consumo = int(linha[6].strip())
                except ValueError:
                    tempo_consumo = 0
                comentario = linha[7].strip() if len(linha) > 7 else ""

                # Plataforma
                if nome_plataforma not in self._plataformas_registradas:
                    self._plataformas_registradas[nome_plataforma] = Plataforma(nome_plataforma)
                plataforma = self._plataformas_registradas[nome_plataforma]

                # Conte√∫do
                conteudo = self._arvore_conteudos.buscar(id_conteudo)
                if not conteudo:
                    conteudo = Conteudo(id_conteudo, nome_conteudo)
                    self._arvore_conteudos.inserir(id_conteudo, conteudo)
                else:
                    # opcional: atualizar nome se desejar
                    if not conteudo.nome_conteudo or conteudo.nome_conteudo.startswith("Conteudo_"):
                        conteudo.nome_conteudo = nome_conteudo

                # Usu√°rio
                usuario = self._arvore_usuarios.buscar(id_usuario)
                if not usuario:
                    usuario = Usuario(id_usuario)
                    self._arvore_usuarios.inserir(id_usuario, usuario)

              

                dados_brutos = {
                    'id_usuario': id_usuario,
                    'timestamp_interacao': timestamp_interacao,
                    'tipo_interacao': tipo_interacao,
                    'watch_duration_seconds': tempo_consumo,
                    'comment_text': comentario
                }
                interacao = Interacao(dados_brutos, conteudo, plataforma)


                conteudo.adicionar_interacao(interacao)
                print(f"[OK] Intera√ß√£o registrada - Conte√∫do: {conteudo.nome_conteudo}, Usu√°rio: {id_usuario}, Tipo: {tipo_interacao}, Dura√ß√£o: {tempo_consumo}")
                usuario.registrar_interacao(interacao)

            except Exception as e:
                print(f"[ERRO] Linha inv√°lida: {linha} - Motivo: {e}")
        print(f"\nTotal de conte√∫dos: {len(self._arvore_conteudos.percurso_em_ordem())}")
        print(f"Total de usu√°rios: {len(self._arvore_usuarios.percurso_em_ordem())}")
        
        
        

    def gerar_relatorio_engajamento_conteudos(self, top_n: int = None):
        """
        Gera um relat√≥rio de engajamento dos conte√∫dos, ordenando-os por diferentes m√©tricas
        como total de intera√ß√µes, tempo total de consumo e engajamento m√©dio.
        
        Chama identificar_top_conteudos para ordenar os conte√∫dos com base na quantidade de intera√ß√µes de engajamento.

        Imprime os top_n conte√∫dos com:
        ID
        Nome
        Total de intera√ß√µes de engajamento
        Tempo total de consumo

        ‚è±Ô∏è An√°lise de Complexidade
        1. percurso_em_ordem() da √°rvore de conte√∫dos:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de conte√∫dos na √°rvore.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de conte√∫dos.
        2. identificar_top_conteudos("calcular_total_interacoes_engajamento", top_n):
        Tempo: O(n log n) ‚Äî onde n √© o n√∫mero de conte√∫dos.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de conte√∫dos ordenados.
        3. Loop de impress√£o dos top_n conte√∫dos:
        Tempo: O(top_n) ‚Äî geralmente pequeno e constante (ex: 5 ou 10).
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        4. Total:
        Tempo: O(n + n log n + top_n) ‚Äî onde n √© o n√∫mero de conte√∫dos.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de conte√∫dos ordenados.
        5. Observa√ß√£o:
        Se top_n for None, a fun√ß√£o retorna todos os conte√∫dos ordenados.

        """
        ordenados = self.identificar_top_conteudos("calcular_total_interacoes_engajamento", top_n)
        return ordenados
        # print("\nüìà Top Conte√∫dos por Intera√ß√µes:")
        # for conteudo in ordenados:
        #     print(f"{conteudo.id_conteudo} - {conteudo.nome_conteudo} | Intera√ß√µes: {conteudo.calcular_total_interacoes_engajamento()} | Tempo Total de Consumo: {conteudo.calcular_tempo_total_consumo()} segundos")
        
    def gerar_relatorio_atividade_usuarios(self, top_n: int = None):
        """
        Gera um relat√≥rio de atividade dos usu√°rios, ordenando-os por total de intera√ß√µes.
        Imprime os top_n usu√°rios com:
        ID do usu√°rio
        Total de intera√ß√µes
        ‚è±Ô∏è An√°lise de Complexidade
        1. percurso_em_ordem() da √°rvore de usu√°rios:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de usu√°rios na √°rvore.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de usu√°rios.
        2. quick_sort(usuarios, "calcular_total_interacoes"):
        Tempo m√©dio: O(n log n) ‚Äî onde n √© o n√∫mero de usu√°rios.
        Tempo pior caso: O(n¬≤) ‚Äî se o piv√¥ estiver sempre mal escolhido.
        Espa√ßo: O(log n) ‚Äî para a pilha de recurs√£o do quick_sort.
        3. Loop de impress√£o dos top_n usu√°rios:
        Tempo: O(top_n) ‚Äî geralmente pequeno e constante (ex: 5 ou 10).
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        4. Total:
        Tempo: O(n + n log n + top_n) ‚Äî onde n √© o n√∫mero de usu√°rios.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de usu√°rios.

        """
        usuarios = self._arvore_usuarios.percurso_em_ordem()

        if not usuarios:
            print("Nenhum usu√°rio registrado.")
            return

        # Ordena os usu√°rios pelo total de intera√ß√µes (decrescente)
        # ordenados = self._ordenar(lista=usuarios, metrica="calcular_total_interacoes", algoritmo="auto")
        
        ordenados = merge_sort(usuarios, "calcular_total_interacoes")

        if top_n is not None:
            ordenados = ordenados[:top_n]

        print(f"Top {top_n if top_n else len(ordenados)} Usu√°rios por Total de Intera√ß√µes:")
        for i, usuario in enumerate(ordenados, 1):
            print(f"{i}. Usu√°rio ID: {usuario.id_usuario} - Total de Intera√ß√µes: {usuario.calcular_total_interacoes()}")
    
    def identificar_top_conteudos(self, metrica: str, n: int = None):
        """
        Identifica os top conte√∫dos com base em uma m√©trica espec√≠fica.
        Par√¢metros:
        - metrica: string com o nome do m√©todo a ser usado para ordena√ß√£o (ex   : "calcular_tempo_total_consumo").
        - n: n√∫mero de conte√∫dos a serem retornados (se None, retorna todos).
        Retorna:
        - Lista dos conte√∫dos ordenados pela m√©trica especificada.
        ‚è±Ô∏è An√°lise de Complexidade
        1. percurso_em_ordem() da √°rvore de conte√∫dos:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de conte√∫dos na √°rvore.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de conte√∫dos.
        2. insertion_sort(conteudos, metrica):
        Tempo m√©dio: O(n log n) ‚Äî onde n √© o n√∫mero de conte√∫dos.
        Tempo pior caso: O(n¬≤) ‚Äî se a lista j√° estiver ordenada ou quase ordenada.
        Espa√ßo: O(n) ‚Äî para armazenar a lista ordenada.
        3. Loop de impress√£o dos top_n conte√∫dos:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de conte√∫dos a serem impressos.
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        4. Total:
        Tempo: O(n + n log n + n) ‚Äî onde n √© o n√∫mero de conte√∫dos.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de conte√∫dos ordenados.
        5. Observa√ß√£o:
        Se n for None, a fun√ß√£o retorna todos os conte√∫dos ordenados.
        Se n for um valor positivo, retorna apenas os top_n conte√∫dos ordenados.

        """
        conteudos = self._arvore_conteudos.percurso_em_ordem()
        ordenados = insertion_sort(conteudos, metrica)
        if not ordenados:
            print("Nenhum conte√∫do registrado.")
            return []
        print(f"Top {n if n else len(ordenados)} Conte√∫dos por {metrica.replace('_', ' ').title()}:")
        for i, conteudo in enumerate(ordenados[:n], 1):
            print(f"{i}. Conte√∫do ID: {conteudo.id_conteudo} - Nome: {conteudo.nome_conteudo} - {metrica.replace('_', ' ').title()}: {getattr(conteudo, metrica)()}")
        return ordenados[:n] if n else ordenados

    def identificar_top_plataformas(self, tipo_engajamento=None, top_n=5):
        """
        Identifica as plataformas com maior n√∫mero de intera√ß√µes de engajamento.
        Par√¢metros:
        - tipo_engajamento: string com o tipo de intera√ß√£o a ser filtrado (ex: "share", "like", "comment", "view_start").
        - top_n: n√∫mero de plataformas a serem retornadas (se None, retorna todas).
        Retorna:
        - Lista das plataformas ordenadas pelo total de intera√ß√µes.
        ‚è±Ô∏è An√°lise de Complexidade
        1. percurso_em_ordem() da √°rvore de conte√∫dos:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de conte√∫dos na √°rvore.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de conte√∫dos.
        2. Loop para contar intera√ß√µes por plataforma:
        Tempo: O(n * m) ‚Äî onde n √© o n√∫mero de conte√∫dos e m √© o n√∫mero de intera√ß√µes por conte√∫do.
        Espa√ßo: O(p) ‚Äî onde p √© o n√∫mero de plataformas distintas.
        3. insertion_sort(plataformas_total.items(), key_func):
        Tempo m√©dio: O(p log p) ‚Äî onde p √© o n√∫mero de plataformas distintas.
        Tempo pior caso: O(p¬≤) ‚Äî se a lista j√° estiver ordenada ou quase ordenada.
        Espa√ßo: O(log p) ‚Äî para a pilha de recurs√£o do insertion_sort.
        4. Loop de impress√£o dos top_n plataformas:
        Tempo: O(top_n) ‚Äî geralmente pequeno e constante (ex: 5 ou  10).
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        5. Total:
        Tempo: O(n + n * m + p log p + top_n) ‚Äî onde n √© o n√∫mero de conte√∫dos, m √© o n√∫mero de intera√ß√µes por conte√∫do e p √© o n√∫mero de plataformas distintas.
        Espa√ßo: O(n + p) ‚Äî para armazenar as intera√ß√µes e plataformas.

        """
        plataformas_total = defaultdict(int)
        plataformas_por_tipo = defaultdict(lambda: defaultdict(int))

        for conteudo in self._arvore_conteudos.percurso_em_ordem():
            for interacao in conteudo.interacoes:
                tipo = interacao.tipo_interacao.strip().lower()
                nome_plataforma = interacao.plataforma_interacao.nome_plataforma

                # Filtra se necess√°rio
                if tipo_engajamento is None or tipo == tipo_engajamento:
                    plataformas_total[nome_plataforma] += 1
                    plataformas_por_tipo[nome_plataforma][tipo] += 1

        # Ordenar as plataformas por total
        plataformas_ordenadas = insertion_sort(list(plataformas_total.items()), key_func=lambda x: x[1])

        # T√≠tulo
        tipo_txt = f"do tipo '{tipo_engajamento}'" if tipo_engajamento else "de todos os tipos"
        print(f"\nTop {top_n} plataformas por intera√ß√µes {tipo_txt}:")

        for i, (nome, total) in enumerate(plataformas_ordenadas[:top_n], 1):
            print(f"{i}. {nome} - {total} intera√ß√µes")
            if tipo_engajamento is None:
                for tipo in ["share", "like", "comment", "view_start"]:
                    qtd = plataformas_por_tipo[nome][tipo]
                    print(f"   - {tipo.capitalize()}: {qtd} intera√ß√µes")
            else:
                qtd = plataformas_por_tipo[nome][tipo_engajamento]
                print(f"   - {tipo_engajamento.capitalize()}: {qtd} intera√ß√µes")

        return plataformas_ordenadas[:top_n] if top_n else plataformas_ordenadas
    
    
    def identificar_top_usuarios_tempo_consumo(self, top_n=10):
        """
        Identifica os usu√°rios com maior tempo total de consumo de conte√∫do.
        Par√¢metros:
        - top_n: n√∫mero de usu√°rios a serem retornados (se None, retorna todos).
        Retorna:
        - Lista dos usu√°rios ordenados pelo tempo total de consumo.
        ‚è±Ô∏è An√°lise de Complexidade
        1. percurso_em_ordem() da √°rvore de usu√°rios:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de usu√°rios na √°rvore.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de usu√°rios.
        2. merge_sort(usuarios, "calcular_tempo_total_consumo"):
        Tempo m√©dio: O(n log n) ‚Äî onde n √© o n√∫mero de usu√°rios.
        Tempo pior caso: O(n¬≤) ‚Äî se o piv√¥ estiver sempre mal escolhido.
        Espa√ßo: O(log n) ‚Äî para a pilha de recurs√£o do merge_sort.
        3. Loop de impress√£o dos top_n usu√°rios:
        Tempo: O(top_n) ‚Äî geralmente pequeno e constante (ex: 5 ou 10).
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        4. Total:
        Tempo: O(n + n log n + top_n) ‚Äî onde n √© o n√∫mero de usu√°rios.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de usu√°rios.
        5. Observa√ß√£o:
        Se top_n for None, a fun√ß√£o retorna todos os usu√°rios ordenados.

        """
        usuarios = self._arvore_usuarios.percurso_em_ordem()
        
        # Ordena com base no m√©todo calcular_tempo_total_consumo
        usuarios_ordenados = merge_sort(usuarios, "calcular_tempo_total_consumo")
        
        print(f"Top {top_n} usu√°rios por tempo total de consumo:")
        for i, u in enumerate(usuarios_ordenados[:top_n], 1):
            total = u.calcular_tempo_total_consumo()
            print(f"{i}. Usu√°rio {u.id_usuario} - {total} segundos")
    
    def identificar_top_usuarios(self, metrica: str, n: int = None):
        """
        Identifica os top usu√°rios com base em uma m√©trica espec√≠fica.
        Par√¢metros:
        - metrica: string com o nome do m√©todo a ser usado para ordena√ß√£o (ex: "calcular_tempo_total_consumo").
        - n: n√∫mero de usu√°rios a serem retornados (se None, retorna todos).
        Retorna:
        - Lista dos usu√°rios ordenados pela m√©trica especificada.
        ‚è±Ô∏è An√°lise de Complexidade
        1. percurso_em_ordem() da √°rvore de usu√°rios:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de usu√°rios na √°rvore.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de usu√°rios.
        2. merge_sort(usuarios, metrica):
        Tempo m√©dio: O(n log n) ‚Äî onde n √© o n√∫mero de usu√°rios.
        Tempo pior caso: O(n¬≤) ‚Äî se o piv√¥ estiver sempre mal escolhido.
        Espa√ßo: O(log n) ‚Äî para a pilha de recurs√£o do merge_sort.
        3. Loop de impress√£o dos top_n usu√°rios:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de usu√°rios a serem impressos.
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        4. Total:
        Tempo: O(n + n log n + n) ‚Äî onde n √© o n√∫mero de usu√°rios.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de usu√°rios ordenados.

        """
        usuarios = self._arvore_usuarios.percurso_em_ordem()
        ordenados = merge_sort(usuarios, metrica)
        if not ordenados:
            print("Nenhum usu√°rio registrado.")
            return []
        print(f"Top {n if n else len(ordenados)} Usu√°rios por {metrica.replace('_', ' ').title()}:")
        for i, usuario in enumerate(ordenados[:n], 1):
            print(f"{i}. Usu√°rio ID: {usuario.id_usuario} - {metrica.replace('_', ' ').title()}: {getattr(usuario, metrica)()}")
        return ordenados[:n] if n else ordenados
    
    def identificar_top_conteudos_comentados(self, top_n=5):
        """
        Identifica os conte√∫dos mais comentados e imprime os top_n conte√∫dos com mais coment√°rios.
        Par√¢metros:
        - top_n: n√∫mero de conte√∫dos a serem retornados (se None, retorna todos).
        Retorna:
        - Lista dos conte√∫dos ordenados pela quantidade de coment√°rios.
        ‚è±Ô∏è An√°lise de Complexidade
        1. percurso_em_ordem() da √°rvore de conte√∫dos:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de conte√∫dos na √°rvore.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de conte√∫dos.
        2. Loop para contar coment√°rios por conte√∫do:
        Tempo: O(n * m) ‚Äî onde n √© o n√∫mero de conte√∫dos e m √© o n√∫mero de intera√ß√µes por conte√∫do.
        Espa√ßo: O(m) ‚Äî onde m √© o n√∫mero de conte√∫dos distintos.
        3. insertion_sort(lista, key_func):
        Tempo m√©dio: O(m log m) ‚Äî onde m √© o n√∫mero de conte√∫dos distintos.
        Tempo pior caso: O(m¬≤) ‚Äî se a lista j√° estiver ordenada ou quase ordenada.
        Espa√ßo: O(log m) ‚Äî para a pilha de recurs√£o do insertion_sort.
        4. Loop de impress√£o dos top_n conte√∫dos:
        Tempo: O(top_n) ‚Äî geralmente pequeno e constante (ex: 5 ou 10).
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.

        """
        conteudos = self._arvore_conteudos.percurso_em_ordem()
        # Mapeia cada conte√∫do para sua contagem de coment√°rios
        lista = []
        for conteudo in conteudos:
            total_comentarios = sum(
                1 for i in conteudo.interacoes
                if i.tipo_interacao == "comment"
            )
            lista.append((conteudo, total_comentarios))

        # Ordena usando quick_sort se quiser (decrescente pelo total de coment√°rios)
        lista_ordenada = insertion_sort(lista, key_func=lambda x: x[1])

        print(f"\nTop {top_n} conte√∫dos mais comentados:")
        for i, (conteudo, total) in enumerate(lista_ordenada[:top_n], 1):
            print(f"{i}. {conteudo.nome_conteudo} (ID {conteudo.id_conteudo}) - {total} coment√°rios")
        
        return lista_ordenada[:top_n] if top_n else lista_ordenada
    
    # Total de intera√ß√µes por tipo de conte√∫do (Liste os conte√∫dos com maior quantidade de intera√ß√µes).
    def identificar_total_interacoes_por_tipo_conteudo(self, top_n=100):
        """
        Identifica o total de intera√ß√µes por tipo de conte√∫do e imprime os top_n conte√∫dos com mais intera√ß√µes.
        Par√¢metros:
        - top_n: n√∫mero de conte√∫dos a serem retornados (se None, retorna todos).   
        Retorna:
        - Lista dos conte√∫dos ordenados pelo total de intera√ß√µes.
        ‚è±Ô∏è An√°lise de Complexidade
        1. percurso_em_ordem() da √°rvore de conte√∫dos:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de conte√∫dos na √°rvore.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de conte√∫dos.
        2. Loop para contar intera√ß√µes por conte√∫do:
        Tempo: O(n * m) ‚Äî onde n √© o n√∫mero de conte√∫dos e m √© o n√∫mero de intera√ß√µes por conte√∫do.
        Espa√ßo: O(m) ‚Äî onde m √© o n√∫mero de conte√∫dos distintos.
        3. insertion_sort(conteudos, key_func):
        Tempo m√©dio: O(m log m) ‚Äî onde m √© o n√∫mero de conte√∫dos distintos.
        Tempo pior caso: O(m¬≤) ‚Äî se a lista j√° estiver ordenada ou quase ordenada.
        Espa√ßo: O(log m) ‚Äî para a pilha de recurs√£o do insertion_sort.
        4. Loop de impress√£o dos top_n conte√∫dos:
        Tempo: O(top_n) ‚Äî geralmente pequeno e constante (ex: 5 ou 10).
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        5. Total:
        Tempo: O(n + n * m + m log m + top_n) ‚Äî onde n √© o n√∫mero de conte√∫dos, m √© o n√∫mero de intera√ß√µes por conte√∫do e m √© o n√∫mero de conte√∫dos distintos.
        Espa√ßo: O(n + m) ‚Äî para armazenar as intera√ß√µes e conte√∫dos.

        """
        conteudos = self._arvore_conteudos.percurso_em_ordem()
        total_interacoes = defaultdict(int)

        for conteudo in conteudos:
            total_interacoes[conteudo.nome_conteudo] += len(conteudo.interacoes)

        # Ordena os conte√∫dos pelo total de intera√ß√µes (decrescente)
        conteudos_ordenados = insertion_sort(list(total_interacoes.items()), key_func=lambda x: x[1])

        print(f"\nTop {top_n} conte√∫dos por total de intera√ß√µes:")
        for i, (nome, total) in enumerate(conteudos_ordenados[:top_n], 1):
            print(f"{i}. {nome} - {total} intera√ß√µes")
        
        return conteudos_ordenados[:top_n] if top_n else conteudos_ordenados
    
    def identificar_tempo_medio_consumo_por_plataforma(self, top_n=5):
        """
        Identifica o tempo m√©dio de consumo por plataforma e imprime os top_n plataformas com maior m√©dia de consumo.
        Par√¢metros:
        - top_n: n√∫mero de plataformas a serem retornadas (se None, retorna todas).
        Retorna:
        - Lista das plataformas ordenadas pelo tempo m√©dio de consumo.
        ‚è±Ô∏è An√°lise de Complexidade
        1. percurso_em_ordem() da √°rvore de conte√∫dos:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de conte√∫dos na √°rvore.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de conte√∫dos.
        2. Loop para calcular o tempo m√©dio de consumo por plataforma:
        Tempo: O(n * m) ‚Äî onde n √© o n√∫mero de conte√∫dos e m √© o n√∫mero de intera√ß√µes por conte√∫do.
        Espa√ßo: O(p) ‚Äî onde p √© o n√∫mero de plataformas distintas.
        3. insertion_sort(plataformas.items(), key_func):
        Tempo m√©dio: O(p log p) ‚Äî onde p √© o n√∫mero de plataformas distintas.
        Tempo pior caso: O(p¬≤) ‚Äî se a lista j√° estiver ordenada ou quase ordenada.
        Espa√ßo: O(log p) ‚Äî para a pilha de recurs√£o do insertion_sort.
        4. Loop de impress√£o dos top_n plataformas:
        Tempo: O(top_n) ‚Äî geralmente pequeno e constante (ex: 5 ou 10).
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        5. Total:
        Tempo: O(n + n * m + p log p + top_n) ‚Äî onde
        n √© o n√∫mero de conte√∫dos, m √© o n√∫mero de intera√ß√µes por conte√∫do e p √© o n√∫mero de plataformas distintas.
        Espa√ßo: O(n + p) ‚Äî para armazenar as intera√ß√µes e plataformas.

        """

        plataformas = defaultdict(list)

        for conteudo in self._arvore_conteudos.percurso_em_ordem():
            for interacao in conteudo.interacoes:
                plataformas[interacao.plataforma_interacao.nome_plataforma].append(interacao.watch_duration_seconds)

        # Calcula a m√©dia de consumo para cada plataforma
        medias = {nome: sum(duracoes) / len(duracoes) for nome, duracoes in plataformas.items()}

        # Ordena as plataformas pela m√©dia de consumo (decrescente)
        plataformas_ordenadas = insertion_sort(list(medias.items()), key_func=lambda x: x[1])

        print(f"\nTop {top_n} plataformas por tempo m√©dio de consumo:")
        for i, (nome, media) in enumerate(plataformas_ordenadas[:top_n], 1):
            print(f"{i}. {nome} - {media:.2f} segundos")
        
        return plataformas_ordenadas[:top_n] if top_n else plataformas_ordenadas

    def identificar_quantidade_comentarios_por_conteudo(self, top_n=5):
        """
        Identifica a quantidade de coment√°rios por conte√∫do e imprime os top_n conte√∫dos com mais coment√°rios.
        Par√¢metros:
        - top_n: n√∫mero de conte√∫dos a serem retornados (se None, retorna todos).
        Retorna:
        - Lista dos conte√∫dos ordenados pela quantidade de coment√°rios.
        ‚è±Ô∏è An√°lise de Complexidade
        1. percurso_em_ordem() da √°rvore de conte√∫dos:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero de conte√∫dos na √°rvore.
        Espa√ßo: O(n) ‚Äî para armazenar a lista de conte√∫dos.
        2. Loop para contar coment√°rios por conte√∫do:
        Tempo: O(n) ‚Äî onde n √© o n√∫mero total de conte√∫dos.
        Espa√ßo: O(m) ‚Äî onde m √© o n√∫mero de conte√∫dos distintos.
        3. insertion_sort(conteudos.items(), key_func):
        Tempo m√©dio: O(m log m) ‚Äî onde m √© o n√∫mero de conte√∫dos distintos.
        Tempo pior caso: O(m¬≤) ‚Äî se a lista j√° estiver ordenada ou quase ordenada.
        Espa√ßo: O(log m) ‚Äî para a pilha de recurs√£o do insertion_sort.
        4. Loop de impress√£o dos top_n conte√∫dos:
        Tempo: O(top_n) ‚Äî geralmente pequeno e constante (ex: 5 ou 10).
        Espa√ßo: O(1) ‚Äî apenas vari√°veis tempor√°rias.
        5. Total:
        Tempo: O(n + n + m log m + top_n) ‚Äî onde n √© o n√∫mero de conte√∫dos,
        m √© o n√∫mero de coment√°rios por conte√∫do e m √© o n√∫mero de conte√∫dos distintos.
        Espa√ßo: O(n + m) ‚Äî para armazenar as intera√ß√µes e conte√∫dos.

        """
            
        conteudos = self._arvore_conteudos.percurso_em_ordem()
        self._arvore_conteudos.imprimir_arvore()
        
        comentarios_por_conteudo = defaultdict(int)

        for conteudo in conteudos:
            for interacao in conteudo.interacoes:
                if interacao.tipo_interacao == "comment":
                    comentarios_por_conteudo[conteudo.nome_conteudo] += 1

        # Ordena os conte√∫dos pelo n√∫mero de coment√°rios (decrescente)
        conteudos_ordenados = insertion_sort(list(comentarios_por_conteudo.items()), key_func=lambda x: x[1])

        print(f"\nTop {top_n} conte√∫dos por quantidade de coment√°rios:")
        for i, (nome, total) in enumerate(conteudos_ordenados[:top_n], 1):
            print(f"{i}. {nome} - {total} coment√°rios")
            # imprimir os coment√°rios de cada conte√∫do
        # for conteudo in self._arvore_conteudos.percurso_em_ordem():
        #     print(f"Conte√∫do: {conteudo.nome_conteudo} (ID: {conteudo.id_conteudo})")
            

            
        return conteudos_ordenados[:top_n] if top_n else conteudos_ordenados